// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gestionEmployer.Infrastructure.Data;

#nullable disable

namespace chatEtInvitation.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("MessageSequence");

            modelBuilder.Entity("chatEtInvitation.Core.Models.AmisChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("Member1")
                        .HasColumnType("int");

                    b.Property<int>("Member2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AmisChats");
                });

            modelBuilder.Entity("chatEtInvitation.Core.Models.BloqueList", b =>
                {
                    b.Property<int>("Bloked")
                        .HasColumnType("int");

                    b.Property<int>("BlokedBy")
                        .HasColumnType("int");

                    b.HasKey("Bloked", "BlokedBy");

                    b.ToTable("BloqueList");
                });

            modelBuilder.Entity("chatEtInvitation.Core.Models.MemberInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("Emetteur")
                        .HasColumnType("int");

                    b.Property<int>("Recerpteur")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MemberInvitations");
                });

            modelBuilder.Entity("chatEtInvitation.Core.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [MessageSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Contenue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Emetteur")
                        .HasColumnType("int");

                    b.Property<DateTime>("when")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("chatEtInvitation.Core.Models.MessageStatut", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("StatutId")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTeam")
                        .HasColumnType("bit");

                    b.HasKey("MessageId", "StatutId", "UtilisateurId");

                    b.HasIndex("StatutId");

                    b.ToTable("MessageStatuts");
                });

            modelBuilder.Entity("chatEtInvitation.Core.Models.Statut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("statuts");
                });

            modelBuilder.Entity("chatEtInvitation.Core.Models.TeamChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TeamChats");
                });

            modelBuilder.Entity("chatEtInvitation.Core.Models.TeamInvitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("Emetteur")
                        .HasColumnType("int");

                    b.Property<int>("Recerpteur")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TeamInvitations");
                });

            modelBuilder.Entity("chatEtInvitation.Core.Models.ChatAmisMessage", b =>
                {
                    b.HasBaseType("chatEtInvitation.Core.Models.Message");

                    b.Property<int>("ChatAmisId")
                        .HasColumnType("int");

                    b.HasIndex("ChatAmisId");

                    b.ToTable("ChatAmisMessages");
                });

            modelBuilder.Entity("chatEtInvitation.Core.Models.TeamChatMessage", b =>
                {
                    b.HasBaseType("chatEtInvitation.Core.Models.Message");

                    b.Property<int>("TeamChatId")
                        .HasColumnType("int");

                    b.HasIndex("TeamChatId");

                    b.ToTable("TeamChatMessages");
                });

            modelBuilder.Entity("chatEtInvitation.Core.Models.MessageStatut", b =>
                {
                    b.HasOne("chatEtInvitation.Core.Models.Message", "Message")
                        .WithMany("Statuts")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("chatEtInvitation.Core.Models.Statut", "Statut")
                        .WithMany("MessageStatuts")
                        .HasForeignKey("StatutId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Statut");
                });

            modelBuilder.Entity("chatEtInvitation.Core.Models.ChatAmisMessage", b =>
                {
                    b.HasOne("chatEtInvitation.Core.Models.AmisChat", "_AmisChat")
                        .WithMany()
                        .HasForeignKey("ChatAmisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_AmisChat");
                });

            modelBuilder.Entity("chatEtInvitation.Core.Models.TeamChatMessage", b =>
                {
                    b.HasOne("chatEtInvitation.Core.Models.TeamChat", "_TeamChat")
                        .WithMany()
                        .HasForeignKey("TeamChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_TeamChat");
                });

            modelBuilder.Entity("chatEtInvitation.Core.Models.Message", b =>
                {
                    b.Navigation("Statuts");
                });

            modelBuilder.Entity("chatEtInvitation.Core.Models.Statut", b =>
                {
                    b.Navigation("MessageStatuts");
                });
#pragma warning restore 612, 618
        }
    }
}
